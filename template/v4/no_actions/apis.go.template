package apis

import (
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/go-admin-team/go-admin-core/sdk/api"
	"github.com/go-admin-team/go-admin-core/sdk/pkg/jwtauth/user"
	_ "github.com/go-admin-team/go-admin-core/sdk/pkg/response"

	"go-admin/app/{{.PackageName}}/models"
	"go-admin/app/{{.PackageName}}/service"
	"go-admin/app/{{.PackageName}}/service/dto"
	"go-admin/common/actions"
)

type {{.ClassName}} struct {
	api.Api
}

// Get{{.ClassName}}List 获取{{.TableComment}}列表
// @Summary 获取{{.TableComment}}列表
// @Description 获取{{.TableComment}}列表
// @Tags {{.TableComment}}
{{- $tablename := .TBName -}}
{{- range .Columns -}}
{{$z := .IsQuery}}
{{- if ($z) }}
// @Param {{.JsonField}} query {{.GoType}} false "{{.ColumnComment}}"
{{- end -}}
{{- end }}
// @Param pageSize query int false "页条数"
// @Param pageIndex query int false "页码"
// @Success 200 {object} response.Response{data=response.Page{list=[]models.{{.ClassName}}}} "{"code": 200, "data": [...]}"
// @Router /api/v1/{{.ModuleName}} [get]
// @Security Bearer
func (e {{.ClassName}}) Get{{.ClassName}}List(c *gin.Context) {
    e.SetContext(c)
    log := e.GetLogger()
	db, err := e.GetOrm()
	if err != nil {
		log.Error(err)
		return
	}

	d := new(dto.{{.ClassName}}Search)
	//查询列表
	err = d.Bind(c)
	if err != nil {
	    log.Warnf("request body bind error, %s", err.Error())
		e.Error( http.StatusUnprocessableEntity, err, "参数验证失败")
		return
	}

	//数据权限检查
	p := actions.GetPermissionFromContext(c)

	list := make([]models.{{.ClassName}}, 0)
	var count int64
	service{{.ClassName}} := service.{{.ClassName}}{}
	service{{.ClassName}}.Log = log
	service{{.ClassName}}.Orm = db
	err = service{{.ClassName}}.Get{{.ClassName}}Page(d, p, &list, &count)
	if err != nil {
		log.Errorf("Get {{.ClassName}} Page error, %s", err.Error())
		e.Error( http.StatusInternalServerError, err, "查询失败")
		return
	}

	e.PageOK( list, int(count), d.GetPageIndex(), d.GetPageSize(), "查询成功")
}

// Get{{.ClassName}} 获取{{.TableComment}}
// @Summary 获取{{.TableComment}}
// @Description 获取{{.TableComment}}
// @Tags {{.TableComment}}
// @Param id path string false "id"
// @Success 200 {object} response.Response{data=models.{{.ClassName}}} "{"code": 200, "data": [...]}"
// @Router /api/v1/{{.ModuleName}}/{id} [get]
// @Security Bearer
func (e {{.ClassName}}) Get{{.ClassName}}(c *gin.Context) {
    e.SetContext(c)
    log := e.GetLogger()
    db, err := e.GetOrm()
	if err != nil {
		log.Error(err)
		return
	}

	control := new(dto.{{.ClassName}}ById)

	//查看详情
	err = control.Bind(c)
	if err != nil {
	    log.Warnf("request body bind error, %s", err.Error())
		e.Error( http.StatusUnprocessableEntity, err, "参数验证失败")
		return
	}
	var object models.{{.ClassName}}

	//数据权限检查
	p := actions.GetPermissionFromContext(c)

	service{{.ClassName}} := service.{{.ClassName}}{}
	service{{.ClassName}}.Log = log
	service{{.ClassName}}.Orm = db
	err = service{{.ClassName}}.Get{{.ClassName}}(control, p, &object)
	if err != nil {
		log.Errorf("Get {{.ClassName}} error, %s", err.Error())
		e.Error( http.StatusInternalServerError, err, "查询失败")
		return
	}

	e.OK( object, "查询成功")
}

// Insert{{.ClassName}} 创建{{.TableComment}}
// @Summary 创建{{.TableComment}}
// @Description 创建{{.TableComment}}
// @Tags {{.TableComment}}
// @Accept application/json
// @Product application/json
// @Param data body dto.{{.ClassName}}Control true "data"
// @Success 200 {object} response.Response	"{"code": 200, "message": "添加成功"}"
// @Router /api/v1/{{.ModuleName}} [post]
// @Security Bearer
func (e {{.ClassName}}) Insert{{.ClassName}}(c *gin.Context) {
    e.SetContext(c)
    log := e.GetLogger()
    db, err := e.GetOrm()
	if err != nil {
		log.Error(err)
		return
	}

	control := new(dto.{{.ClassName}}Control)

	//新增操作
	err = control.Bind(c)
	if err != nil {
	    log.Warnf("request body bind error, %s", err.Error())
		e.Error( http.StatusUnprocessableEntity, err, "参数验证失败")
		return
	}
	object, err := control.GenerateM()
	if err != nil {
		log.Errorf("generate {{.ClassName}} model error, %s", err.Error())
		e.Error( http.StatusInternalServerError, err, "模型生成失败")
		return
	}
	// 设置创建人
	object.SetCreateBy(user.GetUserId(c))

	service{{.ClassName}} := service.{{.ClassName}}{}
	service{{.ClassName}}.Orm = db
	service{{.ClassName}}.Log = log
	err = service{{.ClassName}}.Insert{{.ClassName}}(object.(*models.{{.ClassName}}))
	if err != nil {
		log.Errorf("Insert {{.ClassName}} error, %s", err.Error())
		e.Error( http.StatusInternalServerError, err, "创建失败")
		return
	}

	e.OK( object.GetId(), "创建成功")
}

// Update{{.ClassName}} 修改{{.TableComment}}
// @Summary 修改{{.TableComment}}
// @Description 修改{{.TableComment}}
// @Tags {{.TableComment}}
// @Accept application/json
// @Product application/json
// @Param data body dto.{{.ClassName}}Control true "body"
// @Success 200 {object} response.Response	"{"code": 200, "message": "修改成功"}"
// @Router /api/v1/{{.ModuleName}}/{id} [put]
// @Security Bearer
func (e {{.ClassName}}) Update{{.ClassName}}(c *gin.Context) {
    e.SetContext(c)
    log := e.GetLogger()
    db, err := e.GetOrm()
	if err != nil {
		log.Error(err)
		return
	}

	control := new(dto.{{.ClassName}}Control)

	//更新操作
	err = control.Bind(c)
	if err != nil {
	    log.Warnf("request body bind error, %s", err.Error())
		e.Error( http.StatusUnprocessableEntity, err, "参数验证失败")
		return
	}
	object, err := control.GenerateM()
	if err != nil {
		log.Errorf("generate {{.ClassName}} model error, %s", err.Error())
		e.Error( http.StatusInternalServerError, err, "模型生成失败")
		return
	}
	object.SetUpdateBy(user.GetUserId(c))

	//数据权限检查
	p := actions.GetPermissionFromContext(c)

	service{{.ClassName}} := service.{{.ClassName}}{}
	service{{.ClassName}}.Orm = db
	service{{.ClassName}}.Log = log
	err = service{{.ClassName}}.Update{{.ClassName}}(object.(*models.{{.ClassName}}), p)
	if err != nil {
		log.Errorf("Update {{.ClassName}} error, %s", err.Error())
		e.Error( http.StatusInternalServerError, err, "更新失败")
		return
	}
	e.OK( object.GetId(), "更新成功")
}

// Delete{{.ClassName}} 删除{{.TableComment}}
// @Summary 删除{{.TableComment}}
// @Description 删除{{.TableComment}}
// @Tags {{.TableComment}}
// @Param ids body []int false "ids"
// @Success 200 {object} response.Response	"{"code": 200, "message": "删除成功"}"
// @Router /api/v1/{{.ModuleName}} [delete]
// @Security Bearer
func (e {{.ClassName}}) Delete{{.ClassName}}(c *gin.Context) {
    e.SetContext(c)
    log := e.GetLogger()
    db, err := e.GetOrm()
	if err != nil {
		log.Error(err)
		return
	}

	control := new(dto.{{.ClassName}}ById)

	//删除操作
	err = control.Bind(c)
	if err != nil {
	    log.Warnf("request body bind error, %s", err.Error())
		e.Error( http.StatusUnprocessableEntity, err, "参数验证失败")
		return
	}

	// 设置编辑人
	control.SetUpdateBy(user.GetUserId(c))

	// 数据权限检查
	p := actions.GetPermissionFromContext(c)

	service{{.ClassName}} := service.{{.ClassName}}{}
	service{{.ClassName}}.Orm = db
	service{{.ClassName}}.Log = log
	err = service{{.ClassName}}.Remove{{.ClassName}}(control, p)
	if err != nil {
		log.Errorf("Remove {{.ClassName}} error, %s", err.Error())
		e.Error( http.StatusInternalServerError, err, "删除失败")
		return
	}
	e.OK( control.GetId(), "删除成功")
}